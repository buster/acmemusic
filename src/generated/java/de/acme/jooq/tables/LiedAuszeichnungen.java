/*
 * This file is generated by jOOQ.
 */
package de.acme.jooq.tables;


import de.acme.jooq.Keys;
import de.acme.jooq.Public;
import de.acme.jooq.tables.Lied.LiedPath;
import de.acme.jooq.tables.records.LiedAuszeichnungenRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LiedAuszeichnungen extends TableImpl<LiedAuszeichnungenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lied_auszeichnungen</code>
     */
    public static final LiedAuszeichnungen LIED_AUSZEICHNUNGEN = new LiedAuszeichnungen();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LiedAuszeichnungenRecord> getRecordType() {
        return LiedAuszeichnungenRecord.class;
    }

    /**
     * The column <code>public.lied_auszeichnungen.liedId</code>.
     */
    public final TableField<LiedAuszeichnungenRecord, String> LIEDID = createField(DSL.name("liedId"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.lied_auszeichnungen.auszeichnung</code>.
     */
    public final TableField<LiedAuszeichnungenRecord, String> AUSZEICHNUNG = createField(DSL.name("auszeichnung"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.lied_auszeichnungen.tenant</code>.
     */
    public final TableField<LiedAuszeichnungenRecord, String> TENANT = createField(DSL.name("tenant"), SQLDataType.VARCHAR.nullable(false), this, "");

    private LiedAuszeichnungen(Name alias, Table<LiedAuszeichnungenRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LiedAuszeichnungen(Name alias, Table<LiedAuszeichnungenRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.lied_auszeichnungen</code> table reference
     */
    public LiedAuszeichnungen(String alias) {
        this(DSL.name(alias), LIED_AUSZEICHNUNGEN);
    }

    /**
     * Create an aliased <code>public.lied_auszeichnungen</code> table reference
     */
    public LiedAuszeichnungen(Name alias) {
        this(alias, LIED_AUSZEICHNUNGEN);
    }

    /**
     * Create a <code>public.lied_auszeichnungen</code> table reference
     */
    public LiedAuszeichnungen() {
        this(DSL.name("lied_auszeichnungen"), null);
    }

    public <O extends Record> LiedAuszeichnungen(Table<O> path, ForeignKey<O, LiedAuszeichnungenRecord> childPath, InverseForeignKey<O, LiedAuszeichnungenRecord> parentPath) {
        super(path, childPath, parentPath, LIED_AUSZEICHNUNGEN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LiedAuszeichnungenPath extends LiedAuszeichnungen implements Path<LiedAuszeichnungenRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LiedAuszeichnungenPath(Table<O> path, ForeignKey<O, LiedAuszeichnungenRecord> childPath, InverseForeignKey<O, LiedAuszeichnungenRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LiedAuszeichnungenPath(Name alias, Table<LiedAuszeichnungenRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LiedAuszeichnungenPath as(String alias) {
            return new LiedAuszeichnungenPath(DSL.name(alias), this);
        }

        @Override
        public LiedAuszeichnungenPath as(Name alias) {
            return new LiedAuszeichnungenPath(alias, this);
        }

        @Override
        public LiedAuszeichnungenPath as(Table<?> alias) {
            return new LiedAuszeichnungenPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<LiedAuszeichnungenRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LIED_AUSZEICHNUNGEN__LIED_AUSZEICHNUNGEN_FK);
    }

    private transient LiedPath _lied;

    /**
     * Get the implicit join path to the <code>public.lied</code> table.
     */
    public LiedPath lied() {
        if (_lied == null)
            _lied = new LiedPath(this, Keys.LIED_AUSZEICHNUNGEN__LIED_AUSZEICHNUNGEN_FK, null);

        return _lied;
    }

    @Override
    public LiedAuszeichnungen as(String alias) {
        return new LiedAuszeichnungen(DSL.name(alias), this);
    }

    @Override
    public LiedAuszeichnungen as(Name alias) {
        return new LiedAuszeichnungen(alias, this);
    }

    @Override
    public LiedAuszeichnungen as(Table<?> alias) {
        return new LiedAuszeichnungen(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LiedAuszeichnungen rename(String name) {
        return new LiedAuszeichnungen(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LiedAuszeichnungen rename(Name name) {
        return new LiedAuszeichnungen(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LiedAuszeichnungen rename(Table<?> name) {
        return new LiedAuszeichnungen(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LiedAuszeichnungen where(Condition condition) {
        return new LiedAuszeichnungen(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LiedAuszeichnungen where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LiedAuszeichnungen where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LiedAuszeichnungen where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LiedAuszeichnungen where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LiedAuszeichnungen where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LiedAuszeichnungen where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LiedAuszeichnungen where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LiedAuszeichnungen whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LiedAuszeichnungen whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
