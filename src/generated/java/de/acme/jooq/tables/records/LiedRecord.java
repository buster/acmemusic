/*
 * This file is generated by jOOQ.
 */
package de.acme.jooq.tables.records;


import de.acme.jooq.tables.Lied;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LiedRecord extends UpdatableRecordImpl<LiedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.lied.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.lied.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.lied.tenant</code>.
     */
    public void setTenant(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.lied.tenant</code>.
     */
    public String getTenant() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.lied.titel</code>.
     */
    public void setTitel(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.lied.titel</code>.
     */
    public String getTitel() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.lied.besitzer_id</code>.
     */
    public void setBesitzerId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.lied.besitzer_id</code>.
     */
    public String getBesitzerId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.lied.bytes</code>.
     */
    public void setBytes(byte[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.lied.bytes</code>.
     */
    public byte[] getBytes() {
        return (byte[]) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LiedRecord
     */
    public LiedRecord() {
        super(Lied.LIED);
    }

    /**
     * Create a detached, initialised LiedRecord
     */
    public LiedRecord(String id, String tenant, String titel, String besitzerId, byte[] bytes) {
        super(Lied.LIED);

        setId(id);
        setTenant(tenant);
        setTitel(titel);
        setBesitzerId(besitzerId);
        setBytes(bytes);
        resetChangedOnNotNull();
    }
}
