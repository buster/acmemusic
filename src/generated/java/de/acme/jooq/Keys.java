/*
 * This file is generated by jOOQ.
 */
package de.acme.jooq;


import de.acme.jooq.tables.*;
import de.acme.jooq.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BenutzerRecord> PK_TENANT_BENUTZER = Internal.createUniqueKey(Benutzer.BENUTZER, DSL.name("pk_tenant_benutzer"), new TableField[] { Benutzer.BENUTZER.TENANT, Benutzer.BENUTZER.ID }, true);
    public static final UniqueKey<BenutzerScoreBoardRecord> PK_TENANT_BENUTZER_SCORE_BOARD = Internal.createUniqueKey(BenutzerScoreBoard.BENUTZER_SCORE_BOARD, DSL.name("pk_tenant_benutzer_score_board"), new TableField[] { BenutzerScoreBoard.BENUTZER_SCORE_BOARD.TENANT, BenutzerScoreBoard.BENUTZER_SCORE_BOARD.BENUTZERID }, true);
    public static final UniqueKey<LiedRecord> PK_TENANT_LIED = Internal.createUniqueKey(Lied.LIED, DSL.name("pk_tenant_lied"), new TableField[] { Lied.LIED.TENANT, Lied.LIED.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BenutzerAuszeichnungenRecord, BenutzerRecord> BENUTZER_AUSZEICHNUNGEN__BENUTZER_AUSZEICHNUNGEN_FK = Internal.createForeignKey(BenutzerAuszeichnungen.BENUTZER_AUSZEICHNUNGEN, DSL.name("benutzer_auszeichnungen_fk"), new TableField[] { BenutzerAuszeichnungen.BENUTZER_AUSZEICHNUNGEN.TENANT, BenutzerAuszeichnungen.BENUTZER_AUSZEICHNUNGEN.BENUTZER }, Keys.PK_TENANT_BENUTZER, new TableField[] { Benutzer.BENUTZER.TENANT, Benutzer.BENUTZER.ID }, true);
    public static final ForeignKey<LiedAuszeichnungenRecord, LiedRecord> LIED_AUSZEICHNUNGEN__LIED_AUSZEICHNUNGEN_FK = Internal.createForeignKey(LiedAuszeichnungen.LIED_AUSZEICHNUNGEN, DSL.name("lied_auszeichnungen_fk"), new TableField[] { LiedAuszeichnungen.LIED_AUSZEICHNUNGEN.TENANT, LiedAuszeichnungen.LIED_AUSZEICHNUNGEN.LIEDID }, Keys.PK_TENANT_LIED, new TableField[] { Lied.LIED.TENANT, Lied.LIED.ID }, true);
}
