/*
 * This file is generated by jOOQ.
 */
package de.acme.jooq;


import de.acme.jooq.tables.Benutzer;
import de.acme.jooq.tables.Lied;
import de.acme.jooq.tables.Playlist;
import de.acme.jooq.tables.PlaylistLied;
import de.acme.jooq.tables.records.BenutzerRecord;
import de.acme.jooq.tables.records.LiedRecord;
import de.acme.jooq.tables.records.PlaylistLiedRecord;
import de.acme.jooq.tables.records.PlaylistRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BenutzerRecord> BENUTZER_PKEY = Internal.createUniqueKey(Benutzer.BENUTZER, DSL.name("benutzer_pkey"), new TableField[] { Benutzer.BENUTZER.ID }, true);
    public static final UniqueKey<LiedRecord> LIED_PKEY = Internal.createUniqueKey(Lied.LIED, DSL.name("lied_pkey"), new TableField[] { Lied.LIED.ID }, true);
    public static final UniqueKey<PlaylistRecord> PLAYLIST_PKEY = Internal.createUniqueKey(Playlist.PLAYLIST, DSL.name("playlist_pkey"), new TableField[] { Playlist.PLAYLIST.ID }, true);
    public static final UniqueKey<PlaylistLiedRecord> PK_PLAYLIST_LIED = Internal.createUniqueKey(PlaylistLied.PLAYLIST_LIED, DSL.name("pk_playlist_lied"), new TableField[] { PlaylistLied.PLAYLIST_LIED.LIED_ID, PlaylistLied.PLAYLIST_LIED.PLAYLIST_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PlaylistRecord, BenutzerRecord> PLAYLIST__PLAYLIST_BESITZER_FK = Internal.createForeignKey(Playlist.PLAYLIST, DSL.name("playlist_besitzer_fk"), new TableField[] { Playlist.PLAYLIST.BESITZER }, Keys.BENUTZER_PKEY, new TableField[] { Benutzer.BENUTZER.ID }, true);
    public static final ForeignKey<PlaylistLiedRecord, LiedRecord> PLAYLIST_LIED__FK_LIED_ID = Internal.createForeignKey(PlaylistLied.PLAYLIST_LIED, DSL.name("fk_lied_id"), new TableField[] { PlaylistLied.PLAYLIST_LIED.LIED_ID }, Keys.LIED_PKEY, new TableField[] { Lied.LIED.ID }, true);
    public static final ForeignKey<PlaylistLiedRecord, PlaylistRecord> PLAYLIST_LIED__FK_PLAYLIST_ID = Internal.createForeignKey(PlaylistLied.PLAYLIST_LIED, DSL.name("fk_playlist_id"), new TableField[] { PlaylistLied.PLAYLIST_LIED.PLAYLIST_ID }, Keys.PLAYLIST_PKEY, new TableField[] { Playlist.PLAYLIST.ID }, true);
}
