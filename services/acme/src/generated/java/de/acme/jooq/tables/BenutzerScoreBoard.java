/*
 * This file is generated by jOOQ.
 */
package de.acme.jooq.tables;


import de.acme.jooq.Keys;
import de.acme.jooq.Public;
import de.acme.jooq.tables.records.BenutzerScoreBoardRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BenutzerScoreBoard extends TableImpl<BenutzerScoreBoardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.benutzer_score_board</code>
     */
    public static final BenutzerScoreBoard BENUTZER_SCORE_BOARD = new BenutzerScoreBoard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BenutzerScoreBoardRecord> getRecordType() {
        return BenutzerScoreBoardRecord.class;
    }

    /**
     * The column <code>public.benutzer_score_board.benutzerId</code>.
     */
    public final TableField<BenutzerScoreBoardRecord, String> BENUTZERID = createField(DSL.name("benutzerId"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.benutzer_score_board.lieder</code>.
     */
    public final TableField<BenutzerScoreBoardRecord, Integer> LIEDER = createField(DSL.name("lieder"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.benutzer_score_board.tenant</code>.
     */
    public final TableField<BenutzerScoreBoardRecord, String> TENANT = createField(DSL.name("tenant"), SQLDataType.VARCHAR.nullable(false), this, "");

    private BenutzerScoreBoard(Name alias, Table<BenutzerScoreBoardRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BenutzerScoreBoard(Name alias, Table<BenutzerScoreBoardRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.benutzer_score_board</code> table
     * reference
     */
    public BenutzerScoreBoard(String alias) {
        this(DSL.name(alias), BENUTZER_SCORE_BOARD);
    }

    /**
     * Create an aliased <code>public.benutzer_score_board</code> table
     * reference
     */
    public BenutzerScoreBoard(Name alias) {
        this(alias, BENUTZER_SCORE_BOARD);
    }

    /**
     * Create a <code>public.benutzer_score_board</code> table reference
     */
    public BenutzerScoreBoard() {
        this(DSL.name("benutzer_score_board"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BenutzerScoreBoardRecord> getPrimaryKey() {
        return Keys.PK_TENANT_BENUTZER_SCORE_BOARD;
    }

    @Override
    public BenutzerScoreBoard as(String alias) {
        return new BenutzerScoreBoard(DSL.name(alias), this);
    }

    @Override
    public BenutzerScoreBoard as(Name alias) {
        return new BenutzerScoreBoard(alias, this);
    }

    @Override
    public BenutzerScoreBoard as(Table<?> alias) {
        return new BenutzerScoreBoard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BenutzerScoreBoard rename(String name) {
        return new BenutzerScoreBoard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BenutzerScoreBoard rename(Name name) {
        return new BenutzerScoreBoard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BenutzerScoreBoard rename(Table<?> name) {
        return new BenutzerScoreBoard(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerScoreBoard where(Condition condition) {
        return new BenutzerScoreBoard(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerScoreBoard where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerScoreBoard where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerScoreBoard where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BenutzerScoreBoard where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BenutzerScoreBoard where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BenutzerScoreBoard where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BenutzerScoreBoard where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerScoreBoard whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerScoreBoard whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
