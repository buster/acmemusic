/*
 * This file is generated by jOOQ.
 */
package de.acme.jooq.tables.records;


import de.acme.jooq.tables.Benutzer;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BenutzerRecord extends UpdatableRecordImpl<BenutzerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.benutzer.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.benutzer.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.benutzer.tenant</code>.
     */
    public void setTenant(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.benutzer.tenant</code>.
     */
    public String getTenant() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.benutzer.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.benutzer.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.benutzer.email</code>.
     */
    public void setEmail(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.benutzer.email</code>.
     */
    public String getEmail() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.benutzer.passwort</code>.
     */
    public void setPasswort(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.benutzer.passwort</code>.
     */
    public String getPasswort() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BenutzerRecord
     */
    public BenutzerRecord() {
        super(Benutzer.BENUTZER);
    }

    /**
     * Create a detached, initialised BenutzerRecord
     */
    public BenutzerRecord(String id, String tenant, String name, String email, String passwort) {
        super(Benutzer.BENUTZER);

        setId(id);
        setTenant(tenant);
        setName(name);
        setEmail(email);
        setPasswort(passwort);
        resetChangedOnNotNull();
    }
}
